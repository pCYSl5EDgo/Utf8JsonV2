<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var primitives = new Type[]{
typeof(int),
typeof(long),
typeof(ulong),
typeof(char),
typeof(bool),
typeof(float),
typeof(double),
};
#>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Buffers;
using Utf8Json.Internal;

#if SPAN_BUILTIN
using System.IO;
#endif

// ReSharper disable BuiltInTypeReferenceStyle
#pragma warning disable IDE0060

namespace Utf8Json
{
    public static partial class JsonSerializer
    {
<#foreach(var t in primitives){
var name = t.Name;#>
        public static byte[] Serialize(<#= name #> value, JsonSerializerOptions options)
        {
            var array = ArrayPool<byte>.Shared.Rent(80 * 1024);
            try
            {
                var writer = new JsonWriter(SequencePool.Shared, array);
                try
                {
                    writer.Write(value);
                }
                catch (Exception ex)
                {
                    throw new JsonSerializationException("Failed to serialize <#= t.FullName #> value.", ex);
                }
                return writer.FlushAndGetArray();
            }
            finally
            {
                ArrayPool<byte>.Shared.Return(array);
            }
        }

        public static byte[] Serialize(<#= name #> value)
        {
            var array = ArrayPool<byte>.Shared.Rent(80 * 1024);
            try
            {
                var writer = new JsonWriter(SequencePool.Shared, array);
                try
                {
                    writer.Write(value);
                }
                catch (Exception ex)
                {
                    throw new JsonSerializationException("Failed to serialize <#= t.FullName #> value.", ex);
                }
                return writer.FlushAndGetArray();
            }
            finally
            {
                ArrayPool<byte>.Shared.Return(array);
            }
        }

#if SPAN_BUILTIN
        public static void Serialize(Stream stream, <#= name #> value)
        {
            var sequenceRental = SequencePool.Shared.Rent();
            try
            {
                var fastWriter = new JsonWriter(sequenceRental.Value);
                try
                {
                    fastWriter.Write(value);
                }
                catch (Exception ex)
                {
                    throw new JsonSerializationException("Failed to serialize <#= t.FullName #> value.", ex);
                }
                fastWriter.Flush();

                try
                {
                    foreach (var segment in (ReadOnlySequence<byte>)sequenceRental.Value)
                    {
                        stream.Write(segment.Span);
                    }
                }
                catch (Exception ex)
                {
                    throw new JsonSerializationException("Error occurred while writing the serialized data to the stream.", ex);
                }
            }
            finally
            {
                sequenceRental.Dispose();
            }
        }
#endif

<#}#>
    }
}
#pragma warning restore IDE0060
