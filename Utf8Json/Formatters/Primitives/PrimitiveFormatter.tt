<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
ValueTuple<Type, string>[] types =
{
new ValueTuple<Type, string>(typeof(IntPtr), "IntPtr"),
new ValueTuple<Type, string>(typeof(UIntPtr), "UIntPtr"),
new ValueTuple<Type, string>(typeof(Single), "float"),
new ValueTuple<Type, string>(typeof(Double), "double"),
new ValueTuple<Type, string>(typeof(DateTime), "DateTime"),
new ValueTuple<Type, string>(typeof(decimal), "decimal"),
};
#>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;

#pragma warning disable IDE0060
namespace Utf8Json.Formatters
{
<#foreach (var t in types) {  #>
    public sealed class <#= t.Item1.Name #>Formatter
    : IJsonFormatter<<#= t.Item2 #>>
    {
        public static void SerializeStatic(ref JsonWriter writer, <#= t.Item2 #> value, JsonSerializerOptions options)
        {
            writer.Write(value);
        }

        public void Serialize(ref JsonWriter writer, <#= t.Item2 #> value, JsonSerializerOptions options)
        {
            writer.Write(value);
        }

        public static <#= t.Item2 #> DeserializeStatic(ref JsonReader reader, JsonSerializerOptions options)
        {
            return reader.Read<#= t.Item1.Name #>();
        }

        public <#= t.Item2 #> Deserialize(ref JsonReader reader, JsonSerializerOptions options)
        {
            return reader.Read<#= t.Item1.Name #>();
        }

#if CSHARP_8_OR_NEWER
        public void SerializeTypeless(ref JsonWriter writer, object? value, JsonSerializerOptions options)
#else
        public void SerializeTypeless(ref JsonWriter writer, object value, JsonSerializerOptions options)
#endif
        {
            if (!(value is <#= t.Item2 #> innerValue))
            {
                throw new NullReferenceException();
            }
            
            writer.Write(innerValue);
        }

        public object DeserializeTypeless(ref JsonReader reader, JsonSerializerOptions options)
        {
            return reader.Read<#= t.Item1.Name #>();
        }
    }

<# } #>
}
