<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
ValueTuple<string, string, string, string, string, string>[] tuples = new[]{
new ValueTuple<string, string, string, string, string, string>("Dictionary", "Dictionary<TKey, TValue>", "new Dictionary<TKey, TValue>()", "answer.Add(key, value)", "answer", null),
new ValueTuple<string, string, string, string, string, string>("ReadOnlyDictionary", "ReadOnlyDictionary<TKey, TValue>", "new Dictionary<TKey, TValue>()", "answer.Add(key, value)", "new ReadOnlyDictionary<TKey, TValue>(answer)", null),
new ValueTuple<string, string, string, string, string, string>("SortedDictionary", "SortedDictionary<TKey, TValue>", "new SortedDictionary<TKey, TValue>()", "answer.Add(key, value)", "answer", null),
new ValueTuple<string, string, string, string, string, string>("SortedList", "SortedList<TKey, TValue>", "new SortedList<TKey, TValue>()", "answer.Add(key, value)", "answer", null),
new ValueTuple<string, string, string, string, string, string>("InterfaceDictionary", "IDictionary<TKey, TValue>", "new Dictionary<TKey, TValue>()", "answer.Add(key, value)", "answer", null),
new ValueTuple<string, string, string, string, string, string>("ConcurrentDictionary", "ConcurrentDictionary<TKey, TValue>", "new ConcurrentDictionary<TKey, TValue>()", "answer.TryAdd(key, value)", "answer", null),
new ValueTuple<string, string, string, string, string, string>("ImmutableDictionary", "ImmutableDictionary<TKey, TValue>", "new List<KeyValuePair<TKey, TValue>>()", "answer.Add(new KeyValuePair<TKey, TValue>(key, value))", "ImmutableDictionary<TKey, TValue>.Empty.AddRange(answer)", "IMMUTABLE"),
new ValueTuple<string, string, string, string, string, string>("ImmutableSortedDictionary", "ImmutableSortedDictionary<TKey, TValue>", "new List<KeyValuePair<TKey, TValue>>()", "answer.Add(new KeyValuePair<TKey, TValue>(key, value))", "ImmutableSortedDictionary<TKey, TValue>.Empty.AddRange(answer)", "IMMUTABLE"),
};
#>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;

#if IMMUTABLE
using System.Collections.Immutable;
#endif

namespace Utf8Json.Formatters
{
<#foreach(var t in tuples){#>
<#if(t.Item6 != null){#>#if <#= t.Item6 #><#}#>

    public sealed class <#= t.Item1 #>Formatter<TKey, TValue>
#if CSHARP_8_OR_NEWER
        : IJsonFormatter<<#= t.Item2 #>?>
        where TKey : notnull
#else
        : IJsonFormatter<<#= t.Item2 #>>
#endif
    {
#if CSHARP_8_OR_NEWER
        public void Serialize(ref JsonWriter writer, <#= t.Item2 #>? value, JsonSerializerOptions options)
#else
        public void Serialize(ref JsonWriter writer, <#= t.Item2 #> value, JsonSerializerOptions options)
#endif
        => SerializeStatic(ref writer, value, options);

#if CSHARP_8_OR_NEWER
        public static void SerializeStatic(ref JsonWriter writer, <#= t.Item2 #>? value, JsonSerializerOptions options)
#else
        public static void SerializeStatic(ref JsonWriter writer, <#= t.Item2 #> value, JsonSerializerOptions options)
#endif
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }

            var keyFormatter = options.Resolver.GetFormatterWithVerify<TKey>() as IObjectPropertyNameFormatter<TKey>;
            var valueFormatter = options.Resolver.GetFormatterWithVerify<TValue>();

            writer.WriteBeginObject();

            var e = value.GetEnumerator();
            try
            {
                if (keyFormatter != null)
                {
                    if (e.MoveNext())
                    {
                        var tuple = e.Current;
                        keyFormatter.SerializeToPropertyName(ref writer, tuple.Key, options);
                        writer.WriteNameSeparator();
                        valueFormatter.Serialize(ref writer, tuple.Value, options);
                    }
                    else
                    {
                        goto END;
                    }

                    while (e.MoveNext())
                    {
                        writer.WriteValueSeparator();
                        var tuple = e.Current;
                        keyFormatter.SerializeToPropertyName(ref writer, tuple.Key, options);
                        writer.WriteNameSeparator();
                        valueFormatter.Serialize(ref writer, tuple.Value, options);
                    }
                }
                else
                {
                    if (e.MoveNext())
                    {
                        var tuple = e.Current;
                        var propertyName = tuple.Key.ToString();
                        Debug.Assert(propertyName != null, nameof(propertyName) + " != null");
                        writer.WritePropertyName(propertyName);
                        valueFormatter.Serialize(ref writer, tuple.Value, options);
                    }
                    else
                    {
                        goto END;
                    }

                    while (e.MoveNext())
                    {
                        writer.WriteValueSeparator();
                        var tuple = e.Current;
                        var propertyName = tuple.Key.ToString();
                        Debug.Assert(propertyName != null, nameof(propertyName) + " != null");
                        writer.WritePropertyName(propertyName);
                        valueFormatter.Serialize(ref writer, tuple.Value, options);
                    }
                }
            }
            finally
            {
                e.Dispose();
            }

        END:
            writer.WriteEndObject();
        }

#if CSHARP_8_OR_NEWER
        public <#= t.Item2 #>? Deserialize(ref JsonReader reader, JsonSerializerOptions options)
#else
        public <#= t.Item2 #> Deserialize(ref JsonReader reader, JsonSerializerOptions options)
#endif
        => DeserializeStatic(ref reader, options);

#if CSHARP_8_OR_NEWER
        public static <#= t.Item2 #>? DeserializeStatic(ref JsonReader reader, JsonSerializerOptions options)
#else
        public static <#= t.Item2 #> DeserializeStatic(ref JsonReader reader, JsonSerializerOptions options)
#endif
        {
            if (reader.ReadIsNull())
            {
                return null;
            }

            if (!(options.Resolver.GetFormatterWithVerify<TKey>() is IObjectPropertyNameFormatter<TKey> keyFormatter))
            {
                throw new InvalidOperationException(typeof(TKey) + " does not support dictionary key deserialize.");
            }

            var valueFormatter = options.Resolver.GetFormatterWithVerify<TValue>();

            reader.ReadIsBeginObjectWithVerify();

            var answer = <#= t.Item3 #>;
            var i = 0;
            while (!reader.ReadIsEndObjectWithSkipValueSeparator(ref i))
            {
                var key = keyFormatter.DeserializeFromPropertyName(ref reader, options);
                reader.ReadIsNameSeparatorWithVerify();
                var value = valueFormatter.Deserialize(ref reader, options);
                <#= t.Item4 #>;
            }

            return <#= t.Item5 #>;
        }
    }
<#if(t.Item6 != null){#>#endif<#}#>

<#}#>
}
