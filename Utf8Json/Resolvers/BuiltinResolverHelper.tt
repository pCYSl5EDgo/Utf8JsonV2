<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
ValueTuple<string, string>[] tuples = new[]{
new ValueTuple<string, string>("  byte",  "ByteFormatter"),
new ValueTuple<string, string>("  char",  "CharFormatter"),
new ValueTuple<string, string>(" short",  "Int16Formatter"),
new ValueTuple<string, string>("   int",  "Int32Formatter"),
new ValueTuple<string, string>("  long",  "Int64Formatter"),
new ValueTuple<string, string>(" sbyte",  "SByteFormatter"),
new ValueTuple<string, string>("ushort",  "UInt16Formatter"),
new ValueTuple<string, string>("  uint",  "UInt32Formatter"),
new ValueTuple<string, string>(" ulong",  "UInt64Formatter"),
new ValueTuple<string, string>(" float",  "SingleFormatter"),
new ValueTuple<string, string>("double",  "DoubleFormatter"),
new ValueTuple<string, string>("  bool",  "BooleanFormatter"),

new ValueTuple<string, string>("System.Numerics.BigInteger", "BigIntegerFormatter"),
new ValueTuple<string, string>("System.Numerics.Complex", "ComplexFormatter"),
new ValueTuple<string, string>("System.Threading.Tasks.Task", "TaskUnitFormatter"),
new ValueTuple<string, string>("      System.DateTime", "ISO8601DateTimeFormatter"),
new ValueTuple<string, string>("System.DateTimeOffset", "ISO8601DateTimeOffsetFormatter"),
new ValueTuple<string, string>("      System.TimeSpan", "ISO8601TimeSpanFormatter"),

new ValueTuple<string, string>("string", "NullableStringFormatter"),

new ValueTuple<string, string>("System.Guid", "GuidFormatter"),
new ValueTuple<string, string>("decimal", "DecimalFormatter"),

new ValueTuple<string, string>("System.Text.StringBuilder", "StringBuilderFormatter"),
new ValueTuple<string, string>("System.Collections.BitArray", "BitArrayFormatter"),
new ValueTuple<string, string>("System.Type", "TypeFormatter"),
new ValueTuple<string, string>("System.Uri", "UriFormatter"),
new ValueTuple<string, string>("System.Version", "VersionFormatter"),
};
ValueTuple<string, string>[] unityTuples = new[]{
new ValueTuple<string, string>("      UnityEngine.Rect",  "RectFormatter"),
new ValueTuple<string, string>("     UnityEngine.Color",  "ColorFormatter"),
new ValueTuple<string, string>("    UnityEngine.Bounds",  "BoundsFormatter"),
new ValueTuple<string, string>("   UnityEngine.Vector2",  "Vector2Formatter"),
new ValueTuple<string, string>("   UnityEngine.Vector3",  "Vector3Formatter"),
new ValueTuple<string, string>("   UnityEngine.Vector4",  "Vector4Formatter"),
new ValueTuple<string, string>("   UnityEngine.RectInt",  "RectIntFormatter"),
new ValueTuple<string, string>("   UnityEngine.Color32",  "Color32Formatter"),
new ValueTuple<string, string>(" UnityEngine.Matrix4x4",  "Matrix4x4Formatter"),
new ValueTuple<string, string>("UnityEngine.Vector2Int",  "Vector2IntFormatter"),
new ValueTuple<string, string>("UnityEngine.Vector3Int",  "Vector3IntFormatter"),
new ValueTuple<string, string>("UnityEngine.Quaternion",  "QuaternionFormatter"),
};
ValueTuple<string, string>[] notEnableIL2CPPTuples = new[]{
new ValueTuple<string, string>("System.Dynamic.ExpandoObject", "ExpandoObjectFormatter"),
};
#>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using Utf8Json.Formatters;
using Utf8Json.Internal;

namespace Utf8Json.Resolvers
{
    public sealed partial class BuiltinResolver
    {
        internal static class BuiltinResolverGetFormatterHelper
        {
            private static readonly ThreadSafeTypeKeyFormatterHashTable formatterHashTable
#region table
            = new ThreadSafeTypeKeyFormatterHashTable(new[]
            {
<#foreach(var t in tuples){#>
                FromTypeToMethodHandles.GetEntry<<#= t.Item1 #>, <#= t.Item2 #>>(),
<#}#>

#if UNITY_2018_4_OR_NEWER
<#foreach(var t in unityTuples){#>
                FromTypeToMethodHandles.GetEntry<<#= t.Item1 #>, <#= t.Item2 #>>(),
<#}#>
#endif

#if !ENABLE_IL2CPP
<#foreach(var t in notEnableIL2CPPTuples){#>
                FromTypeToMethodHandles.GetEntry<<#= t.Item1 #>, <#= t.Item2 #>>(),
<#}#>
#endif
            }, 0.5d);
#endregion

            internal static ThreadSafeTypeKeyFormatterHashTable.FunctionPair GetFunctionPointers(System.Type t)
            {
                return formatterHashTable[t];
            }

            private static readonly ThreadSafeTypeKeyReferenceHashTable<IJsonFormatter> formatters =  new ThreadSafeTypeKeyReferenceHashTable<IJsonFormatter>(new[]
            {
<#foreach(var t in tuples){#>
                new ThreadSafeTypeKeyReferenceHashTable<IJsonFormatter>.Entry(typeof(<#= t.Item1 #>), new <#= t.Item2 #>()),
<#}#>

#if UNITY_2018_4_OR_NEWER
<#foreach(var t in unityTuples){#>
                new ThreadSafeTypeKeyReferenceHashTable<IJsonFormatter>.Entry(typeof(<#= t.Item1 #>), new <#= t.Item2 #>()),
<#}#>
#endif

#if !ENABLE_IL2CPP
<#foreach(var t in notEnableIL2CPPTuples){#>
                new ThreadSafeTypeKeyReferenceHashTable<IJsonFormatter>.Entry(typeof(<#= t.Item1 #>), new <#= t.Item2 #>()),
<#}#>
#endif
            }, 0.5d);
            
            internal static ThreadSafeTypeKeyReferenceHashTable<IJsonFormatter> GetFormatterCache() => formatters;
        }
    }
}
