<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
ValueTuple<string, string>[] tuples = new[]{
new ValueTuple<string, string>("  byte",  "ByteFormatter"),
new ValueTuple<string, string>("  char",  "CharFormatter"),
new ValueTuple<string, string>(" short",  "Int16Formatter"),
new ValueTuple<string, string>("   int",  "Int32Formatter"),
new ValueTuple<string, string>("  long",  "Int64Formatter"),
new ValueTuple<string, string>(" sbyte",  "SByteFormatter"),
new ValueTuple<string, string>("ushort",  "UInt16Formatter"),
new ValueTuple<string, string>("  uint",  "UInt32Formatter"),
new ValueTuple<string, string>(" ulong",  "UInt64Formatter"),
new ValueTuple<string, string>(" float",  "SingleFormatter"),
new ValueTuple<string, string>("double",  "DoubleFormatter"),
new ValueTuple<string, string>("  bool",  "BooleanFormatter"),

new ValueTuple<string, string>("  char?",  "NullableCharFormatter"),
new ValueTuple<string, string>("  byte?",  "NullableByteFormatter"),
new ValueTuple<string, string>(" short?",  "NullableInt16Formatter"),
new ValueTuple<string, string>(" int?  ",  "NullableInt32Formatter"),
new ValueTuple<string, string>(" long?  ", "NullableInt64Formatter"),
new ValueTuple<string, string>(" ushort?", "NullableUInt16Formatter"),
new ValueTuple<string, string>("   uint?", "NullableUInt32Formatter"),
new ValueTuple<string, string>("  ulong?", "NullableUInt64Formatter"),
new ValueTuple<string, string>(" sbyte?",  "NullableSByteFormatter"),
new ValueTuple<string, string>(" float?",  "NullableSingleFormatter"),
new ValueTuple<string, string>("double?",  "NullableDoubleFormatter"),
new ValueTuple<string, string>("  bool?",  "NullableBooleanFormatter"),

new ValueTuple<string, string>("  byte[]",  "ByteArrayFormatter"),
new ValueTuple<string, string>("  char[]",  "CharArrayFormatter"),
new ValueTuple<string, string>(" sbyte[]",  "SByteArrayFormatter"),
new ValueTuple<string, string>(" short[]",  "Int16ArrayFormatter"),
new ValueTuple<string, string>("   int[]",  "Int32ArrayFormatter"),
new ValueTuple<string, string>("  long[]",  "Int64ArrayFormatter"),
new ValueTuple<string, string>("ushort[]",  "UInt16ArrayFormatter"),
new ValueTuple<string, string>("  uint[]",  "UInt32ArrayFormatter"),
new ValueTuple<string, string>(" ulong[]",  "UInt64ArrayFormatter"),
new ValueTuple<string, string>(" float[]",  "SingleArrayFormatter"),
new ValueTuple<string, string>("double[]",  "DoubleArrayFormatter"),
new ValueTuple<string, string>("  bool[]",  "BooleanArrayFormatter"),

new ValueTuple<string, string>("List<  byte>",  "ByteListFormatter"),
new ValueTuple<string, string>("List<  char>",  "CharListFormatter"),
new ValueTuple<string, string>("List< short>",  "Int16ListFormatter"),
new ValueTuple<string, string>("List<   int>",  "Int32ListFormatter"),
new ValueTuple<string, string>("List<  long>",  "Int64ListFormatter"),
new ValueTuple<string, string>("List< sbyte>",  "SByteListFormatter"),
new ValueTuple<string, string>("List<ushort>",  "UInt16ListFormatter"),
new ValueTuple<string, string>("List<  uint>",  "UInt32ListFormatter"),
new ValueTuple<string, string>("List< ulong>",  "UInt64ListFormatter"),
new ValueTuple<string, string>("List< float>",  "SingleListFormatter"),
new ValueTuple<string, string>("List<double>",  "DoubleListFormatter"),
new ValueTuple<string, string>("List<  bool>",  "BooleanListFormatter"),

new ValueTuple<string, string>("Memory<  byte>",  "ByteMemoryFormatter"),
new ValueTuple<string, string>("Memory<  char>",  "CharMemoryFormatter"),
new ValueTuple<string, string>("Memory< short>",  "Int16MemoryFormatter"),
new ValueTuple<string, string>("Memory<   int>",  "Int32MemoryFormatter"),
new ValueTuple<string, string>("Memory<  long>",  "Int64MemoryFormatter"),
new ValueTuple<string, string>("Memory< sbyte>",  "SByteMemoryFormatter"),
new ValueTuple<string, string>("Memory<ushort>",  "UInt16MemoryFormatter"),
new ValueTuple<string, string>("Memory<  uint>",  "UInt32MemoryFormatter"),
new ValueTuple<string, string>("Memory< ulong>",  "UInt64MemoryFormatter"),
new ValueTuple<string, string>("Memory< float>",  "SingleMemoryFormatter"),
new ValueTuple<string, string>("Memory<double>",  "DoubleMemoryFormatter"),
new ValueTuple<string, string>("Memory<  bool>",  "BooleanMemoryFormatter"),

new ValueTuple<string, string>("ReadOnlyMemory<  byte>",  "ByteReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory<  char>",  "CharReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory< short>",  "Int16ReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory<   int>",  "Int32ReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory<  long>",  "Int64ReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory< sbyte>",  "SByteReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory<ushort>",  "UInt16ReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory<  uint>",  "UInt32ReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory< ulong>",  "UInt64ReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory< float>",  "SingleReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory<double>",  "DoubleReadOnlyMemoryFormatter"),
new ValueTuple<string, string>("ReadOnlyMemory<  bool>",  "BooleanReadOnlyMemoryFormatter"),

new ValueTuple<string, string>("Dictionary<string, string>", "DictionaryFormatter<string, string>"),
new ValueTuple<string, string>("IDictionary<string, string>", "InterfaceDictionaryFormatter<string, string>"),
new ValueTuple<string, string>("IDictionary<string, object>", "InterfaceDictionaryFormatter<string, object>"),
new ValueTuple<string, string>("BigInteger", "BigIntegerFormatter"),
new ValueTuple<string, string>("BigInteger?", "NullableBigIntegerFormatter"),
new ValueTuple<string, string>("Complex", "ComplexFormatter"),
new ValueTuple<string, string>("Complex?", "NullableComplexFormatter"),
new ValueTuple<string, string>("Task", "TaskUnitFormatter"),
new ValueTuple<string, string>("      DateTime", "ISO8601DateTimeFormatter"),
new ValueTuple<string, string>("DateTimeOffset", "ISO8601DateTimeOffsetFormatter"),
new ValueTuple<string, string>("      TimeSpan", "ISO8601TimeSpanFormatter"),
new ValueTuple<string, string>("      DateTime?", "NullableISO8601DateTimeFormatter"),
new ValueTuple<string, string>("DateTimeOffset?", "NullableISO8601DateTimeOffsetFormatter"),
new ValueTuple<string, string>("      TimeSpan?", "NullableISO8601TimeSpanFormatter"),

new ValueTuple<string, string>("string", "NullableStringFormatter"),
new ValueTuple<string, string>("string[]", "NullableStringArrayFormatter"),
new ValueTuple<string, string>("List<string>", "ListFormatter<string>"),

new ValueTuple<string, string>("              Guid", "GuidFormatter"),
new ValueTuple<string, string>("ArraySegment<byte>", "ArraySegmentFormatter<byte>"),
new ValueTuple<string, string>("decimal", "DecimalFormatter"),
new ValueTuple<string, string>("              Guid?", "NullableGuidFormatter"),
new ValueTuple<string, string>("ArraySegment<byte>?", "NullableArraySegmentFormatter<byte>"),
new ValueTuple<string, string>("           decimal?", "NullableDecimalFormatter"),

new ValueTuple<string, string>("StringBuilder", "StringBuilderFormatter"),
new ValueTuple<string, string>("BitArray", "BitArrayFormatter"),
new ValueTuple<string, string>("Type", "TypeFormatter"),
new ValueTuple<string, string>("Uri", "UriFormatter"),
new ValueTuple<string, string>("Version", "VersionFormatter"),
};
ValueTuple<string, string>[] unityTuples = new[]{
new ValueTuple<string, string>("NativeArray<  byte>",  "ByteNativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray<  char>",  "CharNativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray< short>",  "Int16NativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray<   int>",  "Int32NativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray<  long>",  "Int64NativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray< sbyte>",  "SByteNativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray<ushort>",  "UInt16NativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray<  uint>",  "UInt32NativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray< ulong>",  "UInt64NativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray< float>",  "SingleNativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray<double>",  "DoubleNativeArrayFormatter"),
new ValueTuple<string, string>("NativeArray<  bool>",  "BooleanNativeArrayFormatter"),
};
ValueTuple<string, string>[] notEnableIL2CPPTuples = new[]{
new ValueTuple<string, string>("ExpandoObject", "ExpandoObjectFormatter"),
};
#>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Numerics;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Utf8Json.Formatters;
using Utf8Json.Internal;

#if UNITY_2018_4_OR_NEWER
using Unity.Collections;
#endif

#if !ENABLE_IL2CPP
using System.Dynamic;
#endif

namespace Utf8Json.Resolvers
{
    public sealed partial class BuiltinResolver
    {
        internal static class BuiltinResolverGetFormatterHelper
        {
            private static readonly ThreadSafeTypeKeyFormatterHashTable formatterHashTable
#region table
            = new ThreadSafeTypeKeyFormatterHashTable(new[]
            {
<#foreach(var t in tuples){#>
                FromTypeToMethodHandles.GetEntry<<#= t.Item1 #>, <#= t.Item2 #>>(),
<#}#>

#if UNITY_2018_4_OR_NEWER
<#foreach(var t in unityTuples){#>
                FromTypeToMethodHandles.GetEntry<<#= t.Item1 #>, <#= t.Item2 #>>(),
<#}#>
#endif

#if !ENABLE_IL2CPP
<#foreach(var t in notEnableIL2CPPTuples){#>
                FromTypeToMethodHandles.GetEntry<<#= t.Item1 #>, <#= t.Item2 #>>(),
<#}#>
#endif
            }, 0.5d);
#endregion

            internal static ThreadSafeTypeKeyFormatterHashTable.FunctionPair GetFunctionPointers(Type t)
            {
                return formatterHashTable[t];
            }
        }
    }
}
